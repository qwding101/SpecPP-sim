getwd()
source("../../func/func_sim.R", chdir = T)
Ac = c("A10","A20","A40")
true.spec = list(A10 = list(), A20 = list(), A40 = list())
freq.li = list(A10 = list(omega1 = freq.grid.fun(10, 10)$omega1,
omega2 = freq.grid.fun(10, 10)$omega2),
A20 = list(omega1 = freq.grid.fun(20, 20)$omega1,
omega2 = freq.grid.fun(20, 20)$omega2),
A40 = list(omega1 = freq.grid.fun(40, 40)$omega1,
omega2 = freq.grid.fun(40, 40)$omega2))
source("../../func/func_sim.R", chdir = T)
model = "M1"
a = 0.025 # Data taper
Ac = c("A10","A20","A40")
df.itr = data.frame(c(1,2,1), c(1,2,2))
kappa = c(0.25, 0.75, 0.2) # Parent intensity
sigma = c(0.6, 0.3, 1) # Standard deviation in normal kernel
nu = NULL
xi = matrix(c(0, 0.7, 0, 0.9, 0, 0, 0.3, 0.1, 0), 3, 3, byrow = T) # Interaction parameters
kernels = rep("Thomas", length(kappa))
inten.fun.sep = list(X1 = 0.5, X2 = 1.5) # Intensity
true.spec = list(A10 = list(), A20 = list(), A40 = list())
freq.li = list(A10 = list(omega1 = freq.grid.fun(10, 10)$omega1,
omega2 = freq.grid.fun(10, 10)$omega2),
A20 = list(omega1 = freq.grid.fun(20, 20)$omega1,
omega2 = freq.grid.fun(20, 20)$omega2),
A40 = list(omega1 = freq.grid.fun(40, 40)$omega1,
omega2 = freq.grid.fun(40, 40)$omega2))
for (a.idx in seq_along(true.spec)){
for (r in 1:nrow(df.itr)){
true.spec[[a.idx]][[r]] = outer(freq.li[[a.idx]]$omega2, freq.li[[a.idx]]$omega1,
FUN = function(w2, w1, i, j, inten.fun.sep, a, kappa, xi,
kernels, bandwidth, nu.ker)
f.fun(sqrt(w1^2+w2^2), i, j, inten.fun.sep, a, kappa, xi,
kernels, bandwidth, nu.ker),
i = df.itr[r,1], j = df.itr[r,2], inten.fun.sep=inten.fun.sep, a = a,
kappa = kappa, xi = xi, kernels = kernels, bandwidth = sigma, nu.ker = nu)
attr(true.spec[[a.idx]][[r]], "omega1") = freq.li[[a.idx]]$omega1 # Col frequency
attr(true.spec[[a.idx]][[r]], "omega2") = freq.li[[a.idx]]$omega2 # Row frequency
}
}
I.hat = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "/", Ac[1],"_period.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "/", Ac[2],"_period.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "/", Ac[3],"_period.rds")))
I.hat = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "_", Ac[1],"_period.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "_", Ac[2],"_period.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "_", Ac[3],"_period.rds")))
f.opt = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "_", Ac[1],"_ksde_opt.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "_", Ac[2],"_ksde_opt.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "_", Ac[3],"_ksde_opt.rds")))
f.cv = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "_", Ac[1],"_ksde_cv.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "_", Ac[2],"_ksde_cv.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "_", Ac[3],"_ksde_opt.rds")))
summary.list = list(A10 = matrix(NA, ncol = nrow(df.itr), nrow = 6),
A20 = matrix(NA, ncol = nrow(df.itr), nrow = 6),
A40 = matrix(NA, ncol = nrow(df.itr), nrow = 6))
freq.remove = c(-pi/10, pi/10)
for (a.idx in seq_along(summary.list)){
colnames(summary.list[[a.idx]]) = c("11", "22", "12")
rownames(summary.list[[a.idx]]) = c("IBIAS (I.hat)", "IMSE (I.hat)",
"IBIAS (f.hat.opt)", "IMSE (f.hat.opt)",
"IBIAS (f.hat.cv)", "IMSE (f.hat.cv)")
for (r in 1:nrow(df.itr)){
summary.list[[a.idx]][1, r] = IBIAS.fun(I.hat[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][2, r] = IMSE.fun(I.hat[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][3, r] = IBIAS.fun(f.opt[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][4, r] = IMSE.fun(f.opt[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][5, r] = IBIAS.fun(f.cv[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][6, r] = IMSE.fun(f.cv[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
}
}
summary.list
saveRDS(summary.list, paste0(model, "_summary.rds"))
###########################################################
###### Import functions to calculate IBIAS and IMSE #######
###########################################################
source("../../func/func_sim.R", chdir = T)
###################################
###### Simulation parameters ######
###################################
model = "M2"
a = 0.025 # Data taper
Ac = c("A10","A20","A40")
df.itr = data.frame(c(1,2,1), c(1,2,2))
kappa = c(0.25, 0.75, 0.2) # Parent intensity
sigma = c(0.6, 0.3, 1) # Standard deviation in normal kernel
nu = NULL
xi = matrix(c(0, 0.7, 0, 0.9, 0, 0, 0.3, 0.1, 0), 3, 3, byrow = T) # Interaction parameters
kernels = rep("Thomas", length(kappa))
inten.fun.sep = list() # Intensity functions
inten.fun.sep$X1 = function(x, x_i){
if (x_i == 1) return(3*exp(-2*x^2))
if (x_i == 2) return(exp(-2*x^2))
# The product of above two terms is 3*exp( -2*( (x1)^2 + (x2)^2 ) )
}
inten.fun.sep$X2 = function(x, x_i){
if (x_i == 1) return(2*exp(-2*x^2))
if (x_i == 2) return(exp(2*x^2))
# The product of above two terms is 2*exp( -2*( (x1)^2 - (x2)^2 ) )
}
########################################
######### Compute true spectra #########
########################################
true.spec = list(A10 = list(), A20 = list(), A40 = list())
freq.li = list(A10 = list(omega1 = freq.grid.fun(10, 10)$omega1,
omega2 = freq.grid.fun(10, 10)$omega2),
A20 = list(omega1 = freq.grid.fun(20, 20)$omega1,
omega2 = freq.grid.fun(20, 20)$omega2),
A40 = list(omega1 = freq.grid.fun(40, 40)$omega1,
omega2 = freq.grid.fun(40, 40)$omega2))
for (a.idx in seq_along(true.spec)){
for (r in 1:nrow(df.itr)){
true.spec[[a.idx]][[r]] = outer(freq.li[[a.idx]]$omega2, freq.li[[a.idx]]$omega1,
FUN = function(w2, w1, i, j, inten.fun.sep, a, kappa, xi,
kernels, bandwidth, nu.ker)
f.fun(sqrt(w1^2+w2^2), i, j, inten.fun.sep, a, kappa, xi,
kernels, bandwidth, nu.ker),
i = df.itr[r,1], j = df.itr[r,2], inten.fun.sep=inten.fun.sep, a = a,
kappa = kappa, xi = xi, kernels = kernels, bandwidth = sigma, nu.ker = nu)
attr(true.spec[[a.idx]][[r]], "omega1") = freq.li[[a.idx]]$omega1 # Col freq
attr(true.spec[[a.idx]][[r]], "omega2") = freq.li[[a.idx]]$omega2 # Row freq
}
}
########################################
###### Import spectrum estimators ######
########################################
I.hat = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "_", Ac[1],"_period.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "_", Ac[2],"_period.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "_", Ac[3],"_period.rds")))
f.opt = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "_", Ac[1],"_ksde_opt.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "_", Ac[2],"_ksde_opt.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "_", Ac[3],"_ksde_opt.rds")))
f.cv = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "_", Ac[1],"_ksde_cv.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "_", Ac[2],"_ksde_cv.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "_", Ac[3],"_ksde_opt.rds")))
##################################
###### Compute IBIAS & IMSE ######
##################################
summary.list = list(A10 = matrix(NA, ncol = nrow(df.itr), nrow = 6),
A20 = matrix(NA, ncol = nrow(df.itr), nrow = 6),
A40 = matrix(NA, ncol = nrow(df.itr), nrow = 6))
freq.remove = c(-pi/10, pi/10) # Exclude low-frequency values (∥ω∥∞ < 0.1π) when evaluating IBIAS and IMSE
for (a.idx in seq_along(summary.list)){
colnames(summary.list[[a.idx]]) = c("11", "22", "12")
rownames(summary.list[[a.idx]]) = c("IBIAS (I.hat)", "IMSE (I.hat)",
"IBIAS (f.hat.opt)", "IMSE (f.hat.opt)",
"IBIAS (f.hat.cv)", "IMSE (f.hat.cv)")
for (r in 1:nrow(df.itr)){
summary.list[[a.idx]][1, r] = IBIAS.fun(I.hat[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][2, r] = IMSE.fun(I.hat[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][3, r] = IBIAS.fun(f.opt[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][4, r] = IMSE.fun(f.opt[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][5, r] = IBIAS.fun(f.cv[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][6, r] = IMSE.fun(f.cv[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
}
}
summary.list
saveRDS(summary.list, paste0(model, "_summary.rds"))
###########################################################
###### Import functions to calculate IBIAS and IMSE #######
###########################################################
source("../../func/func_sim.R", chdir = T)
###################################
###### Simulation parameters ######
###################################
model = "M3"
a = 0.025 # Data taper
Ac = c("A10","A20","A40")
df.itr = data.frame(c(1,2,1), c(1,2,2))
kappa = c(0.25, 0.75, 0.2) # Parent intensity
sigma = c(0.6, 0.3, 1) # Standard deviation in normal kernel
nu = NULL
xi = matrix(c(0, -0.7, 0, -0.9, 0, 0, 0.3, 0.1, 0), 3, 3, byrow = T) # Interaction parameters
kernels = rep("Thomas", length(kappa))
inten.fun.sep = list() # Intensity functions
inten.fun.sep$X1 = function(x, x_i){
if (x_i == 1) return(3*exp(-2*x^2))
if (x_i == 2) return(exp(-2*x^2))
# The product of above two terms is 3*exp( -2*( (x1)^2 + (x2)^2 ) )
}
inten.fun.sep$X2 = function(x, x_i){
if (x_i == 1) return(2*exp(-2*x^2))
if (x_i == 2) return(exp(2*x^2))
# The product of above two terms is 2*exp( -2*( (x1)^2 - (x2)^2 ) )
}
########################################
######### Compute true spectra #########
########################################
true.spec = list(A10 = list(), A20 = list(), A40 = list())
freq.li = list(A10 = list(omega1 = freq.grid.fun(10, 10)$omega1,
omega2 = freq.grid.fun(10, 10)$omega2),
A20 = list(omega1 = freq.grid.fun(20, 20)$omega1,
omega2 = freq.grid.fun(20, 20)$omega2),
A40 = list(omega1 = freq.grid.fun(40, 40)$omega1,
omega2 = freq.grid.fun(40, 40)$omega2))
for (a.idx in seq_along(true.spec)){
for (r in 1:nrow(df.itr)){
true.spec[[a.idx]][[r]] = outer(freq.li[[a.idx]]$omega2, freq.li[[a.idx]]$omega1,
FUN = function(w2, w1, i, j, inten.fun.sep, a, kappa, xi,
kernels, bandwidth, nu.ker)
f.fun(sqrt(w1^2+w2^2), i, j, inten.fun.sep, a, kappa, xi,
kernels, bandwidth, nu.ker),
i = df.itr[r,1], j = df.itr[r,2], inten.fun.sep=inten.fun.sep, a = a,
kappa = kappa, xi = xi, kernels = kernels, bandwidth = sigma, nu.ker = nu)
attr(true.spec[[a.idx]][[r]], "omega1") = freq.li[[a.idx]]$omega1 # Col freq
attr(true.spec[[a.idx]][[r]], "omega2") = freq.li[[a.idx]]$omega2 # Row freq
}
}
########################################
###### Import spectrum estimators ######
########################################
I.hat = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "_", Ac[1],"_period.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "_", Ac[2],"_period.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "_", Ac[3],"_period.rds")))
f.opt = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "_", Ac[1],"_ksde_opt.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "_", Ac[2],"_ksde_opt.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "_", Ac[3],"_ksde_opt.rds")))
f.cv = list(A10 = readRDS(paste0("../../estimate/", model, "/", Ac[1], "/", model, "_", Ac[1],"_ksde_cv.rds")),
A20 = readRDS(paste0("../../estimate/", model, "/", Ac[2], "/", model, "_", Ac[2],"_ksde_cv.rds")),
A40 = readRDS(paste0("../../estimate/", model, "/", Ac[3], "/", model, "_", Ac[3],"_ksde_opt.rds")))
##################################
###### Compute IBIAS & IMSE ######
##################################
summary.list = list(A10 = matrix(NA, ncol = nrow(df.itr), nrow = 6),
A20 = matrix(NA, ncol = nrow(df.itr), nrow = 6),
A40 = matrix(NA, ncol = nrow(df.itr), nrow = 6))
freq.remove = c(-pi/10, pi/10)
for (a.idx in seq_along(summary.list)){
colnames(summary.list[[a.idx]]) = c("11", "22", "12")
rownames(summary.list[[a.idx]]) = c("IBIAS (I.hat)", "IMSE (I.hat)",
"IBIAS (f.hat.opt)", "IMSE (f.hat.opt)",
"IBIAS (f.hat.cv)", "IMSE (f.hat.cv)")
for (r in 1:nrow(df.itr)){
summary.list[[a.idx]][1, r] = IBIAS.fun(I.hat[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][2, r] = IMSE.fun(I.hat[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][3, r] = IBIAS.fun(f.opt[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][4, r] = IMSE.fun(f.opt[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][5, r] = IBIAS.fun(f.cv[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
summary.list[[a.idx]][6, r] = IMSE.fun(f.cv[[a.idx]][[r]], true.spec[[a.idx]][[r]], remove = freq.remove)
}
}
summary.list
saveRDS(summary.list, paste0(model, "_summary.rds"))
getwd()
Mc = paste0("M", 1:3)
Mc
library(tidyr)
library(dplyr)
library(stringr)
library(kableExtra)
Mc = paste0("M", 1:3)
tb.list.A10 = tb.list.A20 = tb.list.A40 = list()
for (i in seq_along(Mc)){
tb.list.A10[[i]] = t(readRDS(paste0(Mc[i],"_summary.rds"))$A10)
tb.list.A20[[i]] = t(readRDS(paste0(Mc[i],"_summary.rds"))$A20)
tb.list.A40[[i]] = t(readRDS(paste0(Mc[i],"_summary.rds"))$A40)
}
tb.list.A10
tb.df = data.frame()
for (m in 1:3){
df.m = as.data.frame(rbind(tb.list.A10[[m]], tb.list.A20[[m]], tb.list.A40[[m]]))
df.m$ij = rep(row.names(tb.list.A10[[m]]),3)
df.m$model = Mc[m]
df.m$window = rep(c("$[-5,5]^2$", "$[-10,10]^2$", "$[-20,20]^2$"), each = nrow(tb.list.A10[[m]]))
tb.df = rbind(tb.df, df.m)
row.names(tb.df) = NULL
}
tb.df$ij = factor(tb.df$ij, levels = c("11","22","12"),
labels = c("$F^{(1,1)}_h$","$F^{(2,2)}_h$","$F^{(1,2)}_h$"))
tb.df = tb.df[, c(colnames(tb.df)[c(8,7,9)], colnames(tb.df)[1:6])] %>%
arrange(model, ij)
tb.tex = tb.df %>%
mutate(across(where(is.numeric), ~ round(.x, 2))) %>%
kbl(format = "latex",
booktabs = T,
escape = F,
longtable=F,
align = "c",
col.names = c("Model", "Pseudo-spectrum", "Window", rep(c("IBIAS","IMSE"),3)),
caption = "Table 2: IBIAS$^2$ and IMSE for the three pseudo-spectrum estimators.") %>%
add_header_above(c(" " = 3,
r"($\\hat{I}_{h,n}" = 2,
r"($\\hat{F}_\\text{opt}$)" = 2,
r"($\\hat{F}_\\text{CV}$)" = 2),
escape = F) %>%
collapse_rows(columns = 1:2, latex_hline = "custom", custom_latex_hline=1:2)
tb.tex = gsub("\\centering\\arraybackslash ", "", x = as.character(tb.tex), ignore.case = F, fixed = T)
# Copy the result to latex editor
cat(tb.tex)
tb.df = data.frame()
for (m in 1:3){
df.m = as.data.frame(rbind(tb.list.A10[[m]], tb.list.A20[[m]], tb.list.A40[[m]]))
df.m$ij = rep(row.names(tb.list.A10[[m]]),3)
df.m$model = Mc[m]
df.m$window = rep(c("$[-5,5]^2$", "$[-10,10]^2$", "$[-20,20]^2$"), each = nrow(tb.list.A10[[m]]))
tb.df = rbind(tb.df, df.m)
row.names(tb.df) = NULL
}
tb.df$ij = factor(tb.df$ij, levels = c("11","22","12"),
labels = c("$F^{(1,1)}_h$","$F^{(2,2)}_h$","$F^{(1,2)}_h$"))
tb.df = tb.df[, c(colnames(tb.df)[c(8,7,9)], colnames(tb.df)[1:6])] %>%
arrange(model, ij)
tb.tex = tb.df %>%
mutate(across(where(is.numeric), ~ round(.x, 2))) %>%
kbl(format = "latex",
booktabs = T,
escape = F,
longtable=F,
align = "c",
col.names = c("Model", "Pseudo-spectrum", "Window", rep(c("IBIAS","IMSE"),3)),
caption = "Table 2: IBIAS$^2$ and IMSE for the three pseudo-spectrum estimators.") %>%
add_header_above(c(" " = 3,
r"($\\hat{I}_{h,n})" = 2,
r"($\\hat{F}_\\text{opt}$)" = 2,
r"($\\hat{F}_\\text{CV}$)" = 2),
escape = F) %>%
collapse_rows(columns = 1:2, latex_hline = "custom", custom_latex_hline=1:2)
tb.tex = gsub("\\centering\\arraybackslash ", "", x = as.character(tb.tex), ignore.case = F, fixed = T)
# Copy below result to LaTeX editor to generate table 2
cat(tb.tex)
tb.df = data.frame()
for (m in 1:3){
df.m = as.data.frame(rbind(tb.list.A10[[m]], tb.list.A20[[m]], tb.list.A40[[m]]))
df.m$ij = rep(row.names(tb.list.A10[[m]]),3)
df.m$model = Mc[m]
df.m$window = rep(c("$[-5,5]^2$", "$[-10,10]^2$", "$[-20,20]^2$"), each = nrow(tb.list.A10[[m]]))
tb.df = rbind(tb.df, df.m)
row.names(tb.df) = NULL
}
tb.df$ij = factor(tb.df$ij, levels = c("11","22","12"),
labels = c("$F^{(1,1)}_h$","$F^{(2,2)}_h$","$F^{(1,2)}_h$"))
tb.df = tb.df[, c(colnames(tb.df)[c(8,7,9)], colnames(tb.df)[1:6])] %>%
arrange(model, ij)
tb.tex = tb.df %>%
mutate(across(where(is.numeric), ~ round(.x, 2))) %>%
kbl(format = "latex",
booktabs = T,
escape = F,
longtable=F,
align = "c",
col.names = c("Model", "Pseudo-spectrum", "Window", rep(c("IBIAS","IMSE"),3)),
caption = "Table 2: IBIAS$^2$ and IMSE for the three pseudo-spectrum estimators.") %>%
add_header_above(c(" " = 3,
r"($\\hat{I}_{h,n}$)" = 2,
r"($\\hat{F}_\\text{opt}$)" = 2,
r"($\\hat{F}_\\text{CV}$)" = 2),
escape = F) %>%
collapse_rows(columns = 1:2, latex_hline = "custom", custom_latex_hline=1:2)
tb.tex = gsub("\\centering\\arraybackslash ", "", x = as.character(tb.tex), ignore.case = F, fixed = T)
# Copy below result to LaTeX editor to generate table 2
cat(tb.tex)
?kbl
knitr::opts_current$get('label')
#############################################
###### Import packages and bandwidths #######
#############################################
library(kableExtra)
library(dplyr)
Ac = c("A10","A20","A40")
bopt = c(0.5, 400^(-1/6), 1600^(-1/6))
tb.list.M1 = tb.list.M2 = tb.list.M3 = list()
for (i in seq_along(Ac)){
tb.list.M1[[i]] = readRDS(paste0("../../estimate/M1/", Ac[i], "/M1_", Ac[i], "_optbandwidth.rds"))
tb.list.M2[[i]] = readRDS(paste0("../../estimate/M2/", Ac[i], "/M2_", Ac[i], "_optbandwidth.rds"))
tb.list.M3[[i]] = readRDS(paste0("../../estimate/M3/", Ac[i], "/M3_", Ac[i], "_optbandwidth.rds"))
}
names(tb.list.M1) = names(tb.list.M2) = names(tb.list.M3) = Ac
###############################
###### Generate table 1 #######
###############################
df.band = cbind(lapply(tb.list.M1, summary)[[1]], lapply(tb.list.M2, summary)[[1]], lapply(tb.list.M3, summary)[[1]],
lapply(tb.list.M1, summary)[[2]], lapply(tb.list.M2, summary)[[2]], lapply(tb.list.M3, summary)[[2]],
lapply(tb.list.M1, summary)[[3]], lapply(tb.list.M2, summary)[[3]], lapply(tb.list.M3, summary)[[3]])
df.band = data.frame(df.band)
colnames(df.band) = c(paste0(rep(Ac, each = 3) ,paste0("M", 1:3)))
df.band = rbind(df.band, rep(bopt, each = 3))
df.band$val = c("min", "Q1", "Q2", "Mean", "Q3", "max", "$b_\\text{opt}$")
df.band = df.band[df.band$val %in% c("Q1","Q2","Q3","Mean","$b_\\text{opt}$"),]
df.band = df.band %>% slice(match(c("$b_\\text{opt}$","Q1","Q2","Q3","Mean"), val))
df.band = df.band[, c("val", colnames(df.band)[-ncol(df.band)])]
row.names(df.band) = NULL
tb.tex = df.band %>%
mutate(across(where(is.numeric), ~ round(.x, 2))) %>%
kbl(format = "latex",
booktabs = T,
escape = F,
longtable = F,
align = "c",
col.names = c("", rep(c("M1","M2","M3"), 3)),
caption = "Table 1: The three quartiles (second to fourth row) and the average (fifth row) of $b_\\text{CV}$ from 500
replications for each window and model. The first row indicates the optimal bandwidth.") %>%
add_header_above(c(" " = 1,
r"($D = [-5,5]^2$)" = 3,
r"($D = [-10,10]^2$)" = 3,
r"($D = [-20,20]^2$)" = 3),
escape = F)
tb.tex = gsub("\\caption", "\\caption*", x = as.character(tb.tex), ignore.case = F, fixed = T)
# Copy below result to LaTeX editor to generate table 1
# Remember to add `\usepackage{amsmath, booktabs, caption}` in the preamble to make it works
cat(tb.tex)
##################################################################
###### Import packages, IBIAS and IMSE of the three models #######
##################################################################
library(tidyr)
library(dplyr)
library(stringr)
library(kableExtra)
Mc = paste0("M", 1:3)
tb.list.A10 = tb.list.A20 = tb.list.A40 = list()
for (i in seq_along(Mc)){
tb.list.A10[[i]] = t(readRDS(paste0(Mc[i],"_summary.rds"))$A10)
tb.list.A20[[i]] = t(readRDS(paste0(Mc[i],"_summary.rds"))$A20)
tb.list.A40[[i]] = t(readRDS(paste0(Mc[i],"_summary.rds"))$A40)
}
###############################
###### Generate table 2 #######
###############################
tb.df = data.frame()
for (m in 1:3){
df.m = as.data.frame(rbind(tb.list.A10[[m]], tb.list.A20[[m]], tb.list.A40[[m]]))
df.m$ij = rep(row.names(tb.list.A10[[m]]),3)
df.m$model = Mc[m]
df.m$window = rep(c("$[-5,5]^2$", "$[-10,10]^2$", "$[-20,20]^2$"), each = nrow(tb.list.A10[[m]]))
tb.df = rbind(tb.df, df.m)
row.names(tb.df) = NULL
}
tb.df$ij = factor(tb.df$ij, levels = c("11","22","12"),
labels = c("$F^{(1,1)}_h$","$F^{(2,2)}_h$","$F^{(1,2)}_h$"))
tb.df = tb.df[, c(colnames(tb.df)[c(8,7,9)], colnames(tb.df)[1:6])] %>%
arrange(model, ij)
tb.tex = tb.df %>%
mutate(across(where(is.numeric), ~ round(.x, 2))) %>%
kbl(format = "latex",
booktabs = T,
escape = F,
longtable=F,
align = "c",
col.names = c("Model", "Pseudo-spectrum", "Window", rep(c("IBIAS","IMSE"),3)),
caption = "Table 2: IBIAS$^2$ and IMSE for the three pseudo-spectrum estimators.") %>%
add_header_above(c(" " = 3,
r"($\\hat{I}_{h,n}$)" = 2,
r"($\\hat{F}_\\text{opt}$)" = 2,
r"($\\hat{F}_\\text{CV}$)" = 2),
escape = F) %>%
collapse_rows(columns = 1:2, latex_hline = "custom", custom_latex_hline=1:2)
tb.tex = gsub("\\centering\\arraybackslash ", "", x = as.character(tb.tex), ignore.case = F, fixed = T)
tb.tex = gsub("\\caption", "\\caption*", x = as.character(tb.tex), ignore.case = F, fixed = T)
# Copy below result to LaTeX editor to generate table 2
# Remember to add `\usepackage{amsmath, booktabs, caption}` in the preamble to make it works
cat(tb.tex)
cat(tb.tex)
